{"version":3,"sources":["components/checkbox/checkbox.components.jsx","App.js","serviceWorker.js","index.js"],"names":["Checkbox","label","isSelected","onCheckboxChange","className","type","name","checked","onChange","CHANNELS","App","state","checkboxes","reduce","channels","channel","activeChannelsList","selectAllCheckboxes","Object","keys","forEach","checkbox","setState","prevState","selectAll","deselectAll","handleCheckboxChange","changeEvent","target","handleFormSubmit","formSubmitEvent","preventDefault","filter","push","console","log","Axios","post","createCheckbox","key","createCheckboxes","map","onSubmit","this","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iVAmBeA,G,YAfE,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,WAAYC,EAAtB,EAAsBA,iBAAtB,OACf,yBAAKC,UAAU,cACb,+BACE,2BACEC,KAAK,WACLC,KAAML,EACNM,QAASL,EACTM,SAAUL,EACVC,UAAU,qBAEZ,8BAAOH,OCNPQ,EAAW,CACb,UAEA,WAEA,aAEA,cAEA,WAEA,WA4GWC,E,4MAvGbC,MAAQ,CACNC,WAAYH,EAASI,QACnB,SAACC,EAAUC,GAAX,sBACKD,EADL,eAEGC,GAAU,MAEb,IAGFC,mBAAoB,I,EAGtBC,oBAAsB,SAAAf,GACpBgB,OAAOC,KAAK,EAAKR,MAAMC,YAAYQ,SAAQ,SAAAC,GAEzC,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1BX,WAAW,eACNW,EAAUX,WADL,eAEPS,EAAWnB,Y,EAMpBsB,UAAY,kBAAM,EAAKP,qBAAoB,I,EAE3CQ,YAAc,kBAAM,EAAKR,qBAAoB,I,EAE7CS,qBAAuB,SAAAC,GAAgB,IAC7BrB,EAASqB,EAAYC,OAArBtB,KAER,EAAKgB,UAAS,SAAAC,GAAS,MAAK,CAC1BX,WAAW,eACNW,EAAUX,WADL,eAEPN,GAAQiB,EAAUX,WAAWN,U,EAKpCuB,iBAAmB,SAAAC,GACjBA,EAAgBC,iBAEhB,EAAKT,SAAS,CAACN,mBAAoB,KAEnCE,OAAOC,KAAK,EAAKR,MAAMC,YACpBoB,QAAO,SAAAX,GAAQ,OAAI,EAAKV,MAAMC,WAAWS,MACzCD,SAAQ,SAAAC,GACP,EAAKV,MAAMK,mBAAmBiB,KAAKZ,MAGrCa,QAAQC,IAAI,EAAKxB,MAAMK,oBAEvBoB,IAAMC,KAAK,mDAAoD,EAAK1B,MAAMK,qB,EAG9EsB,eAAiB,SAAAvB,GAAO,OACtB,kBAAC,EAAD,CACEd,MAAOc,EACPb,WAAY,EAAKS,MAAMC,WAAWG,GAClCZ,iBAAkB,EAAKuB,qBACvBa,IAAKxB,K,EAITyB,iBAAmB,kBAAM/B,EAASgC,IAAI,EAAKH,iB,uDAGzC,OACE,yBAAKlC,UAAU,aACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,aACf,yDACA,6DACE,0BAAMsC,SAAUC,KAAKd,kBAClBc,KAAKH,mBAEN,yBAAKpC,UAAU,mBACb,4BACEC,KAAK,SACLD,UAAU,+BACVwC,QAASD,KAAKnB,WAHhB,cAOA,4BACEnB,KAAK,SACLD,UAAU,+BACVwC,QAASD,KAAKlB,aAHhB,gBAOA,4BAAQpB,KAAK,SAASD,UAAU,mBAAhC,mB,GA5FEyC,aCXEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.d1945cdc.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./checkbox.styles.css\"\r\n\r\nconst Checkbox = ({ label, isSelected, onCheckboxChange }) => (\r\n  <div className=\"form-check\">\r\n    <label>\r\n      <input\r\n        type=\"checkbox\"\r\n        name={label}\r\n        checked={isSelected}\r\n        onChange={onCheckboxChange}\r\n        className=\"form-check-input\"\r\n      />\r\n      <span>{label}</span>\r\n    </label>\r\n  </div>\r\n);\r\n\r\nexport default Checkbox;","import Axios from 'axios';\nimport React, {Component} from 'react';\n//import {ChannelList} from './components/channels-list/channels-list.components';\nimport './App.css';\n\nimport Checkbox from \"./components/checkbox/checkbox.components\"\n\n\nconst CHANNELS = [\n    'CasBeam',\n\n    'CasStave',\n \n    'FasTasBeam',\n\n    'FasTasStave',\n  \n    'PRSStave',\n  \n    'IDRSBus',\n  \n];\n\nclass App extends Component {\n  state = {\n    checkboxes: CHANNELS.reduce(\n      (channels, channel) => ({\n        ...channels,\n        [channel]: false\n      }),\n      {}\n    ),\n\n    activeChannelsList: []\n  };\n\n  selectAllCheckboxes = isSelected => {\n    Object.keys(this.state.checkboxes).forEach(checkbox => {\n      // BONUS: Can you explain why we pass updater function to setState instead of an object?\n      this.setState(prevState => ({\n        checkboxes: {\n          ...prevState.checkboxes,\n          [checkbox]: isSelected\n        }\n      }));\n    });\n  };\n\n  selectAll = () => this.selectAllCheckboxes(true);\n\n  deselectAll = () => this.selectAllCheckboxes(false);\n\n  handleCheckboxChange = changeEvent => {\n    const { name } = changeEvent.target;\n\n    this.setState(prevState => ({\n      checkboxes: {\n        ...prevState.checkboxes,\n        [name]: !prevState.checkboxes[name]\n      }\n    }));\n  };\n\n  handleFormSubmit = formSubmitEvent => {\n    formSubmitEvent.preventDefault();\n\n    this.setState({activeChannelsList: []});\n\n    Object.keys(this.state.checkboxes)\n      .filter(checkbox => this.state.checkboxes[checkbox])\n      .forEach(checkbox => {\n        this.state.activeChannelsList.push(checkbox);\n      });\n\n      console.log(this.state.activeChannelsList);\n\n      Axios.post('http://localhost:3391/api/channel/PostActiveList', this.state.activeChannelsList);\n  };\n\n  createCheckbox = channel => (\n    <Checkbox\n      label={channel}\n      isSelected={this.state.checkboxes[channel]}\n      onCheckboxChange={this.handleCheckboxChange}\n      key={channel}\n    />\n  );\n\n  createCheckboxes = () => CHANNELS.map(this.createCheckbox);\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row mt-5\">\n          <div className=\"col-sm-12\">\n          <h1>Tsalul Channel Controller</h1>\n          <h2>Select channels to listen to:</h2>\n            <form onSubmit={this.handleFormSubmit}>\n              {this.createCheckboxes()}\n\n              <div className=\"form-group mt-2\">\n                <button\n                  type=\"button\"\n                  className=\"btn btn-outline-primary mr-2\"\n                  onClick={this.selectAll}\n                >\n                  Select All\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-outline-primary mr-2\"\n                  onClick={this.deselectAll}\n                >\n                  Deselect All\n                </button>\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  Accept\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n  \n\n  \n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}